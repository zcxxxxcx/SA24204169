}
a <- c(1, 2)
d <- 1e4
result <- sum_series(d, a)
result
library(gmp)
integral <- function(c, k) {
integrand <- function(u) {
(1 + u^2 / k) ^ (-(k + 1) / 2)
}
return(integrate(integrand, 0, c)$value)
}
equation <- function(a, k) {
c_k <- sqrt(a^2 * k / (k + 1 - a^2))
c_k_minus_1 <- sqrt(a^2 * (k - 1) / (k - a^2))
lhs <- (2 * gamma(k / 2) / sqrt(pi * (k - 1) * gamma((k - 1) / 2))) * integral(c_k_minus_1, k - 1)
rhs <- (2 * gamma((k + 1) / 2) / (sqrt(pi * k) * gamma(k / 2))) * integral(c_k, k)
return(lhs - rhs)
}
solve_for_a <- function(k) {
result <- uniroot(equation, c(0.1, 1.5), k = k)
return(result$root)
}
k <- 3
a_solution <- solve_for_a(k)
print(paste("Solution for a when k =", k, "is a =", a_solution))
Y <- c(0.54, 0.48, 0.33, 0.43, 1.00, 1.00, 0.91, 1.00, 0.21, 0.85)
tau <- 1
delta <- ifelse(Y < tau, 1, 0)
lambda <- mean(Y)
tolerance <- 1e-6
max_iter <- 1000
diff <- 1
iter <- 0
# E-M algorithm
while (diff > tolerance && iter < max_iter) {
iter <- iter + 1
lambda_old <- lambda
T_imputed <- ifelse(delta == 1, Y, tau + lambda)
lambda <- mean(T_imputed)
diff <- abs(lambda - lambda_old)
}
cat("Estimated lambda using E-M algorithm:", lambda, "\n")
delta <- ifelse(Y < tau, 1, 0)
n1 <- sum(delta)
S <- sum(delta * Y + (1 - delta) * tau)
lambda_mle <- S / n1
cat("Estimated lambda (MLE) considering censoring:", lambda_mle, "\n")
kth_term <- function(k, d, a) {
norm_a <- sqrt(sum(a^2))
gamma_d_half <- lgamma((d + 1) / 2)
gamma_k_3_half <- lgamma(k + 1.5)
gamma_k_d_half_plus_1 <- lgamma(k + (d / 2) + 1)
coefficient <- ((-1)^k) / (factorial(k) * (2^k))
power_term <- (norm_a^(2 * k + 2)) / ((2 * k + 1) * (2 * k + 2))
gamma_ratio_log <- gamma_d_half + gamma_k_3_half - gamma_k_d_half_plus_1
term <- coefficient * power_term * exp(gamma_ratio_log)
return(term)
}
sum_series <- function(d, a, tol = 1e-5, max_k = 100) {
sum <- 0
k <- 0
term <- kth_term(k, d, a)
while (abs(term) > tol && k < max_k) {
sum <- sum + term
k <- k + 1
term <- kth_term(k, d, a)
}
return(sum)
}
library(gmp)
integral <- function(c, k) {
integrand <- function(u) {
(1 + u^2 / k) ^ (-(k + 1) / 2)
}
return(integrate(integrand, 0, c)$value)
}
equation <- function(a, k) {
c_k <- sqrt(a^2 * k / (k + 1 - a^2))
c_k_minus_1 <- sqrt(a^2 * (k - 1) / (k - a^2))
lhs <- (2 * gamma(k / 2) / sqrt(pi * (k - 1) * gamma((k - 1) / 2))) * integral(c_k_minus_1, k - 1)
rhs <- (2 * gamma((k + 1) / 2) / (sqrt(pi * k) * gamma(k / 2))) * integral(c_k, k)
return(lhs - rhs)
}
solve_for_a <- function(k) {
result <- uniroot(equation, c(0.1, 1.5), k = k)
return(result$root)
}
k <- 3
a_solution <- solve_for_a(k)
print(paste("Solution for a when k =", k, "is a =", a_solution))
Y <- c(0.54, 0.48, 0.33, 0.43, 1.00, 1.00, 0.91, 1.00, 0.21, 0.85)
tau <- 1
delta <- ifelse(Y < tau, 1, 0)
lambda <- mean(Y)
tolerance <- 1e-6
max_iter <- 1000
diff <- 1
iter <- 0
# E-M algorithm
while (diff > tolerance && iter < max_iter) {
iter <- iter + 1
lambda_old <- lambda
T_imputed <- ifelse(delta == 1, Y, tau + lambda)
lambda <- mean(T_imputed)
diff <- abs(lambda - lambda_old)
}
cat("Estimated lambda using E-M algorithm:", lambda, "\n")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
initialize_tableau <- function() {
matrix(c(
2, 1, 1, 1, 0, 2,
1, -1, 3, 0, 1, 3,
-4, -2, -9, 0, 0, 0
), nrow = 3, byrow = TRUE)
}
simplex_pivot <- function(tableau, pivot_row, pivot_col) {
tableau[pivot_row, ] <- tableau[pivot_row, ] / tableau[pivot_row, pivot_col]
for (i in seq_len(nrow(tableau))) {
if (i != pivot_row) {
tableau[i, ] <- tableau[i, ] - tableau[i, pivot_col] * tableau[pivot_row, ]
}
}
return(tableau)
}
is_optimal <- function(tableau) {
all(tableau[nrow(tableau), -ncol(tableau)] >= 0)
}
get_pivot <- function(tableau) {
pivot_col <- which.min(tableau[nrow(tableau), -ncol(tableau)])
ratios <- tableau[-nrow(tableau), ncol(tableau)] / tableau[-nrow(tableau), pivot_col]
ratios[ratios <= 0] <- Inf
pivot_row <- which.min(ratios)
return(list(pivot_row = pivot_row, pivot_col = pivot_col))
}
simplex <- function() {
tableau <- initialize_tableau()
while (!is_optimal(tableau)) {
pivot <- get_pivot(tableau)
tableau <- simplex_pivot(tableau, pivot$pivot_row, pivot$pivot_col)
}
solution <- rep(0, ncol(tableau) - 1)  # 初始化解
for (i in seq_len(nrow(tableau) - 1)) {
basic_var_index <- which(tableau[i, 1:(ncol(tableau) - 1)] == 1)
if (length(basic_var_index) == 1) {
solution[basic_var_index] <- tableau[i, ncol(tableau)]
}
}
objective_value <- tableau[nrow(tableau), ncol(tableau)] * -1  # 原问题是最小化
list(solution = solution, objective_value = objective_value)
}
result <- simplex()
cat("最优解:\n")
print(result$solution)
cat("最小目标值:\n")
print(result$objective_value)
data(mtcars)
formulas <- list(
mpg ~ disp,
mpg ~ I(1 / disp),
mpg ~ disp + wt,
mpg ~ I(1 / disp) + wt
)
models_for <- list()
for (i in seq_along(formulas)) {
models_for[[i]] <- lm(formulas[[i]], data = mtcars)
}
cat("Models fitted using for loop:\n")
print(models_for)
models_lapply <- lapply(formulas, function(formula) lm(formula, data = mtcars))
cat("\nModels fitted using lapply():\n")
print(models_lapply)
data(mtcars)
set.seed(0)
bootstraps <- lapply(1:10, function(i) {
rows <- sample(1:nrow(mtcars), rep = TRUE)
mtcars[rows, ]
})
models_for1 <- list()
for (i in seq_along(bootstraps)) {
models_for1[[i]] <- lm(mpg ~ disp, data = bootstraps[[i]])
}
cat("Models fitted using for loop:\n")
print(models_for1)
fit_model <- function(data) lm(mpg ~ disp, data = data)  # Define a named function
models_lapply1 <- lapply(bootstraps, fit_model)
cat("\nModels fitted using lapply():\n")
print(models_lapply1)
rsq <- function(mod) summary(mod)$r.squared
sapply(models_for, rsq)
sapply(models_lapply, rsq)
sapply(models_for1, rsq)
sapply(models_lapply1, rsq)
set.seed(0)
trials <- replicate(
100,
t.test(rpois(10, 10), rpois(7, 10)),
simplify = FALSE
)
sapply(trials, function(test) test$p.value)
parallel_apply <- function(fun, ..., FUN.VALUE) {
inputs <- list(...)
results <- Map(fun, inputs[[1]], inputs[[2]])
vapply(results, identity, FUN.VALUE = FUN.VALUE)
}
#Example
set.seed(0)
list1 <- 1:5
list2 <- c(2, 4, 6, 8, 10)
sum_fun <- function(x, y) x + y
result <- parallel_apply(sum_fun, list1, list2, FUN.VALUE = numeric(1))
print(result)
fast_chisq_test <- function(x, y) {
observed <- table(x, y)
row_totals <- margin.table(observed, 1)
col_totals <- margin.table(observed, 2)
grand_total <- sum(observed)
expected <- outer(row_totals, col_totals, FUN = "*") / grand_total
chi_square_stat <- sum((observed - expected)^2 / expected)
return(chi_square_stat)
}
# test
set.seed(1)
x <- sample(1:5, 1e6, replace = TRUE)
y <- sample(1:5, 1e6, replace = TRUE)
fast_chisq_time <- system.time({
result_fast <- fast_chisq_test(x, y)
})
cat("fast_chisq_test 执行时间: ", fast_chisq_time[3], "秒\n")
chisq_time <- system.time({
result_chisq <- chisq.test(x, y)
})
cat("chisq.test 执行时间: ", chisq_time[3], "秒\n")
set.seed(0)
fast_table <- function(x, y) {
ux <- seq(min(x), max(x))
uy <- seq(min(y), max(y))
xi <- match(x, ux)
yi <- match(y, uy)
result <- matrix(0L, nrow = length(ux), ncol = length(uy))
index <- (xi - 1L) * length(uy) + yi
counts <- tabulate(index, nbins = length(ux) * length(uy))
result[] <- counts
dimnames(result) <- list(as.character(ux), as.character(uy))
return(result)
}
x <- sample(1:5, 1e6, replace = TRUE)
y <- sample(1:5, 1e6, replace = TRUE)
fast_table_time <- system.time({
result_fast <- fast_table(x, y)
})
cat("fast_table 执行时间: ", fast_table_time[3], "秒\n")
table_time <- system.time({
result_table <- table(x, y)
})
cat("table 执行时间: ", table_time[3], "秒\n")
fast_chisq_test <- function(x, y) {
observed <- fast_table(x, y)
row_totals <- margin.table(observed, 1)
col_totals <- margin.table(observed, 2)
grand_total <- sum(observed)
expected <- outer(row_totals, col_totals, FUN = "*") / grand_total
chi_square_stat <- sum((observed - expected)^2 / expected)
return(chi_square_stat)
}
# test
set.seed(1)
x <- sample(1:5, 1e6, replace = TRUE)
y <- sample(1:5, 1e6, replace = TRUE)
fast_chisq_time <- system.time({
result_fast <- fast_chisq_test(x, y)
})
cat("fast_chisq_test 执行时间: ", fast_chisq_time[3], "秒\n")
chisq_time <- system.time({
result_chisq <- chisq.test(x, y)
})
cat("chisq.test 执行时间: ", chisq_time[3], "秒\n")
knitr::opts_chunk$set(echo = TRUE)
# R-function
gibbs_sampler_r <- function(n, a, b, num_iter, n_init = 0) {
x_chain <- numeric(num_iter)
y_chain <- numeric(num_iter)
x <- n_init
y <- 0.5
for (i in 1:num_iter) {
x <- rbinom(1, n, y)
y <- rbeta(1, x + a, n - x + b)
x_chain[i] <- x
y_chain[i] <- y
}
list(x = x_chain, y = y_chain)
}
library(Rcpp)
sourceCpp("gibbs_sampler.cpp")
n <- 10
a <- 2
b <- 2
num_iter <- 10000
set.seed(0)
result_rcpp <- gibbs_sampler_rcpp(n, a, b, num_iter)
result_r <- gibbs_sampler_r(n, a, b, num_iter)
# QQ Plot comparison for x and y
par(mfrow = c(1, 2))
qqplot(result_rcpp$x, result_r$x, main = "QQ Plot for x", xlab = "Rcpp x", ylab = "R x")
abline(0, 1, col = "red")
qqplot(result_rcpp$y, result_r$y, main = "QQ Plot for y", xlab = "Rcpp y", ylab = "R y")
abline(0, 1, col = "red")
library(microbenchmark)
ts <- microbenchmark(
Rcpp = gibbs_sampler_rcpp(n, a, b, num_iter),
R = gibbs_sampler_r(n, a, b, num_iter),
times = 10
)
summary(ts)[,c(1,3,5,6)]
library(Rcpp)
sourceCpp("gibbs_sampler.cpp")
n <- 10
a <- 2
b <- 2
num_iter <- 10000
set.seed(0)
result_rcpp <- gibbs_sampler_rcpp(n, a, b, num_iter)
result_r <- gibbs_sampler_r(n, a, b, num_iter)
# QQ Plot comparison for x and y
par(mfrow = c(1, 2))
qqplot(result_rcpp$x, result_r$x, main = "QQ Plot for x", xlab = "Rcpp x", ylab = "R x")
abline(0, 1, col = "red")
qqplot(result_rcpp$y, result_r$y, main = "QQ Plot for y", xlab = "Rcpp y", ylab = "R y")
abline(0, 1, col = "red")
# R-function
gibbs_sampler_r <- function(n, a, b, num_iter, n_init = 0) {
x_chain <- numeric(num_iter)
y_chain <- numeric(num_iter)
x <- n_init
y <- 0.5
for (i in 1:num_iter) {
x <- rbinom(1, n, y)
y <- rbeta(1, x + a, n - x + b)
x_chain[i] <- x
y_chain[i] <- y
}
list(x = x_chain, y = y_chain)
}
library(microbenchmark)
ts <- microbenchmark(
Rcpp = gibbs_sampler_rcpp(n, a, b, num_iter),
R = gibbs_sampler_r(n, a, b, num_iter),
times = 10
)
summary(ts)[,c(1,3,5,6)]
build_vignettes()
check()
library(Rcpp)
r <- rnorm(100)
r0 <- rnorm(100)
sourceCpp("pvalue.cpp")
r <- rnorm(100)
r0 <- rnorm(100)
mypackage::pvalue(r,r0)
# Load the data from the .rda file
load(system.file("data", "data.rda", package = "mypackage"))
d <- dim(data)[2]
w0 <- rep(1/d,d)
mypackage::optimize_weights(data, w0,120,0.1,-0.1)
# Load the data from the .rda file
load(system.file("data", "data.rda", package = "mypackage"))
d <- dim(data)[2]
w0 <- rep(1/d,d)
mypackage::optimize_weights(data, w0,120,1e3,-0.1)
# Load the data from the .rda file
load(system.file("data", "data.rda", package = "mypackage"))
d <- dim(data)[2] #dim of the data
w0 <- rep(1/d,d) #Initial weight
n <- 120 #window
mypackage::optimize_weights(data, w0, n, 1e-3, -0.1)
# Load the data from the .rda file
load(system.file("data", "data.rda", package = "mypackage"))
d <- dim(data)[2] #dim of the data
w0 <- rep(1/d,d) # Initial weight
n <- 120 # Window
delta <- 1e-3 # Robustness parameter
alpha <- -0.1 # Adjusted expected return
mypackage::optimize_weights(data, w0, n, delta, alpha)
# Load the data from the .rda file
load(system.file("data", "data.rda", package = "mypackage"))
d <- dim(data)[2] #dim of the data
w0 <- rep(1/d,d) # Initial weight
n <- 120 # Window
delta <- 1e-3 # Robustness parameter
alpha <- -0.1 # Adjusted expected return
result <- mypackage::optimize_weights(data, w0, n, delta, alpha)
plot(result$returns)
# Load the data from the .rda file
load(system.file("data", "data.rda", package = "mypackage"))
d <- dim(data)[2] #dim of the data
w0 <- rep(1/d,d) # Initial weight
n <- 120 # Window
delta <- 1e-3 # Robustness parameter
alpha <- -0.1 # Adjusted expected return
result <- mypackage::optimize_weights(data, w0, n, delta, alpha)
hist(result$returns)
# Load the data from the .rda file
load(system.file("data", "data.rda", package = "mypackage"))
d <- dim(data)[2] #dim of the data
w0 <- rep(1/d,d) # Initial weight
n <- 120 # Window
delta <- 1e-3 # Robustness parameter
alpha <- -0.1 # Adjusted expected return
result <- mypackage::optimize_weights(data, w0, n, delta, alpha)
result
# Load the data from the .rda file
load(system.file("data", "data.rda", package = "mypackage"))
d <- dim(data)[2] #dim of the data
w0 <- rep(1/d,d) # Initial weight
n <- 120 # Window
delta <- 1e-3 # Robustness parameter
alpha <- -0.1 # Adjusted expected return
result <- mypackage::optimize_weights(data, w0, n, delta, alpha)
result
hist(result$returns, main = "Distribution of earning rates")
# Load the data from the .rda file
load(system.file("data", "data.rda", package = "mypackage"))
d <- dim(data)[2] #dim of the data
w0 <- rep(1/d,d) # Initial weight
n <- 120 # Window
delta <- 1e-3 # Robustness parameter
alpha <- -0.1 # Adjusted expected return
result <- mypackage::optimize_weights(data, w0, n, delta, alpha)
result
hist(result$returns, main = "Distribution of earning rates", xlab = "Returns")
r1 <- result$returns # returns we get above
r2 <- rnorm(length(r1)) # simulated data for convenience
pvalue(r1,r2)
set.seed(0)
r1 <- result$returns # returns we get above
r2 <- rnorm(length(r1)) # simulated data for convenience
pvalue(r1,r2)
set.seed(0)
r1 <- result$returns # returns we get above
r2 <- rnorm(length(r1)) # simulated data for convenience
pvalue(r1,r2)
knitr::opts_chunk$set(echo = TRUE)
r <- rnorm(100)
r0 <- rnorm(100)
mypackage::pvalue(r,r0)
# Load the data from the .rda file
load(system.file("data", "data.rda", package = "mypackage"))
d <- dim(data)[2] #dim of the data
w0 <- rep(1/d,d) # Initial weight
n <- 120 # Window
delta <- 1e-3 # Robustness parameter
alpha <- -0.1 # Adjusted expected return
result <- mypackage::optimize_weights(data, w0, n, delta, alpha)
result
hist(result$returns, main = "Distribution of earning rates", xlab = "Returns")
set.seed(0)
r1 <- result$returns # returns we get above
r2 <- rnorm(length(r1)) # simulated data for convenience
pvalue(r1,r2)
document()
document()
check()
# Load the data from the .rda file
load(system.file("data", "data.rda", package = "SA24204169"))
d <- dim(data)[2] #dim of the data
w0 <- rep(1/d,d) # Initial weight
n <- 120 # Window
delta <- 1e-3 # Robustness parameter
alpha <- -0.1 # Adjusted expected return
result <- SA24204169::optimize_weights(data, w0, n, delta, alpha)
result
hist(result$returns, main = "Distribution of earning rates", xlab = "Returns")
# Load the data from the .rda file
load(system.file("data", "data.rda", package = "SA24204169"))
d <- dim(data)[2] #dim of the data
w0 <- rep(1/d,d) # Initial weight
n <- 120 # Window
delta <- 1e-3 # Robustness parameter
alpha <- -0.1 # Adjusted expected return
result <- SA24204169::optimize_weights(data, w0, n, delta, alpha)
result
hist(result$returns, main = "Distribution of earning rates", xlab = "Returns")
set.seed(0)
r1 <- result$returns # returns we get above
r2 <- rnorm(length(r1)) # simulated data for convenience
SA24204169::pvalue(r1,r2)
check()
library(devtools)
check()
build_vignettes()
build_vignettes()
check()
document()
document()
document()
build_vignettes()
check()
check()
build_vignettes()
devtools::build(vignettes=FALSE)
install.packages("C:/Users/zcx/AppData/Local/R/win-library/4.4/SA24204169_1.0.tar.gz", repos = NULL, type = "source")
knitr::opts_chunk$set(echo = TRUE)
library(SA24204169)
library(SA24204169)
pvalue(r,r0)
library(SA24204169)
pvalue(rnorm(10), rnorm(10))
library(SA24204169)
pvalue(rnorm(10), rnorm(10))
knitr::opts_chunk$set(echo = TRUE)
library(SA24204169)
install.packages("C:/Users/zcx/AppData/Local/R/win-library/4.4/SA24204169_1.0.tar.gz", repos = NULL, type = "source")
